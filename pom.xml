<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.lzl</groupId>
    <artifactId>study</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>pom</packaging>

    <name>学习之旅</name>
    <description>杂七杂八搞起来</description>
    <url>https://adragonqaq.github.io/</url>

    <developers>
        <developer>
            <id>adragon</id>
            <name>lzl</name>
            <url>https://adragonqaq.github.io/</url>
        </developer>
    </developers>

    <!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 -->
    <licenses>
        <!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 -->
        <license>
            <!--license用于法律上的名称 -->
            <name>Apache 2</name>
            <!--官方的license正文页面的URL -->
            <url>http://www.baidu.com/banseon/LICENSE-2.0.txt</url>
            <!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 -->
            <distribution>repo</distribution>
            <!--关于license的补充信息 -->
            <comments>A business-friendly OSS license</comments>
        </license>
    </licenses>


    <modules>
        <module>algorithm</module>
        <module>jdk8</module>
        <module>lock</module>
        <module>queue</module>
        <module>thread</module>
        <module>transactional</module>
        <module>calculate</module>
    </modules>

    <!--配置参数，子类也可以用 -->
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <checkstyle.config.location>checkStyle.xml</checkstyle.config.location> <!--这里指定了代码规范检查的规则文件，已经位置在项目根目录下-->
    </properties>

    <!--统一管理 但不真正依赖 -->
    <dependencyManagement>
        <dependencies>
        </dependencies>
    </dependencyManagement>

    <!--真正依赖 子可以继承 -->
    <dependencies>
        <!--junit 测试 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <!--lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.8</version>
        </dependency>
        <!--hutool jdk8对应的5 jdk7对应的版本4 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.4.1</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <!--相当于dependencyManagement一样的 对子类的插件统一管理 -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.10.4</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <!--真正被用到的插件 -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
            </plugin>
        </plugins>
    </build>

    <!--配置不同的环境  这里面加了其他的插件，不想用可以不走dev环境-->
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.19.1</version>
                    </plugin>
                    <plugin>
                        <!--
                            mvn checkstyle:help           查看checkstyle-plugin的帮助：
                            mvn checkstyle:check          检查工程是否满足checkstyle的检查，如果没有满足，检查会失败，可以通过target/site/checkstyle.html查看。
                            mvn checkstyle:checkstyle     检查工程是否满足checkstyle的检查，如果没有满足，检查不会失败，可以通过target/site/checkstyle.html查看。
                            mvn checkstyle:checkstyle-aggregate     检查工程是否满足checkstyle的检查，如果没有满足，检查不会失败，可以通过target/site/checkstyle.html查看。
                            在运行完“mvn checkstyle:checkstyle”命令后，可以运行"mvn jxr:jxr"来使checkstyle的结果可以直接跳转到代码行位置
                         -->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <!--名字任意 -->
                                <id>validate</id>
                                <!-- 绑定到validate生命周期阶段上 -->
                                <phase>validate</phase>
                                <configuration>
                                    <encoding>UTF-8</encoding>
                                    <consoleOutput>true</consoleOutput>
                                    <failsOnError>true</failsOnError>
                                    <linkXRef>false</linkXRef>
                                </configuration>
                                <!-- 只运行.. -->
<!--                                <goals>-->
<!--                                    <goal>check</goal>-->
<!--                                </goals>-->
                                <goals>
                                    <goal>checkstyle-aggregate</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- findbugs插件 ：静态检查代码的错误
                    mvn findbugs:help       查看findbugs插件的帮助
                    mvn findbugs:check      检查代码是否通过findbugs检查，如果没有通过检查，检查会失败，但检查不会生成结果报表
                    mvn findbugs:findbugs   检查代码是否通过findbugs检查，如果没有通过检查，检查不会失败，会生成结果报表保存在target/findbugsXml.xml文件中
                    mvn findbugs:gui        检查代码并启动gui界面来查看结果
                    -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>findbugs-maven-plugin</artifactId>
                        <version>3.0.4</version>
                        <configuration>
                            <!-- 设置分析工作的等级，可以为Min、Default和Max -->
                            <effort>Low</effort>
                            <!-- Low、Medium和High (Low最严格) -->
                            <threshold>Medium</threshold>
                            <failOnError>true</failOnError>
                            <includeTests>true</includeTests>
                            <!--findbugs需要忽略的错误的配置文件-->
                            <!--  <excludeFilterFile>compile.bat</excludeFilterFile> -->
                        </configuration>
                        <executions>
                            <execution>
                                <id>run-findbugs</id>
                                <!-- 在install 阶段触发执行findbugs检查，比如执行 mvn clean package-->
                                <phase>install</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

            <reporting>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <version>3.1.0</version>
<!--                        <reportSets>-->
<!--                            <reportSet>-->
<!--                                <reports>-->
<!--                                    <report>checkstyle</report>-->
<!--                                </reports>-->
<!--                            </reportSet>-->
<!--                        </reportSets>-->
                    </plugin>
                </plugins>
            </reporting>
        </profile>
    </profiles>


</project>